import { type Asset } from 'contentful'
import { type DeepReplace } from '@/types/util'
import {
  type IWork,
  type IWorkFields,
  type IClient,
  type IClientFields,
  type ITech,
  type ITechFields,
  type IImpact,
  type IImpactFields,
  type IAuthor,
  type IAuthorFields,
  type IIntroSection,
  type IIntroSectionFields,
  type IWorkSection,
  type IWorkSectionFields,
  type ISocialMediaLink,
  type ISocialMediaLinkFields,
} from './types.generated'

// Fix autogenerated contentful types

export type TAsset = {
  url: string
  width: number
  height: number
}

export type TRichAsset = TAsset & {
  sys: {
    id: string
  }
  title: string
  placeholder: string
}

export type TEmoji = {
  __typename: string
  sys: {
    id: string
  }
  emojiImage: TRichAsset
}

export type TImageList = {
  __typename: string
  sys: {
    id: string
  }
  images: {
    items: TRichAsset[]
  }
}

export type TDocument = {
  json: Document
  links: {
    entries: {
      block: TImageList[]
      inline: TEmoji[]
    }
  }
}

export type TClient = DeepReplace<IClient & IClientFields, Asset, TAsset>
export type TTech = DeepReplace<ITech & ITechFields, Asset, TAsset>
export type TImpact = DeepReplace<IImpact & IImpactFields, Asset, TAsset>
export type TAuthor = DeepReplace<IAuthor & IAuthorFields, Asset, TRichAsset>
export type TWorkItem = DeepReplace<
  IWork & Omit<IWorkFields, 'body'>,
  Asset,
  TAsset
> & {
  client: TClient
  techs: TTech[]
  impacts: TImpact[]
  body: TDocument
}
export type TSocialMediaLink = DeepReplace<
  ISocialMediaLink & ISocialMediaLinkFields,
  Asset,
  TAsset
>

export type TIntroSection = IIntroSection &
  IIntroSectionFields & { author: TAuthor }

export type TWorkSection = Omit<
  IWorkSection & IWorkSectionFields,
  'workItems'
> & {
  workItems: TWorkItem[]
}
